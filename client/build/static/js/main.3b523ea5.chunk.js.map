{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","useMutation","saveBook","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","infoLink","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","log","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","removeBook","userData","me","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3b523ea5.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!) {\r\n        addUser(username: $username, email: $email, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($bookId: String!, $authors: [String!], $description: String, $title: String!, $image: String, $link: String) {\r\n        saveBook(bookId: $bookId, authors: $authors, description: $description, title: $title, image: $image, link: $link) \r\n        {\r\n            savedBooks{\r\n                bookId\r\n                authors\r\n                title\r\n                description\r\n                image\r\n                link\r\n        }\r\n             _id\r\n             username\r\n             email\r\n             bookCount   \r\n                        }\r\n        }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: String!) {\r\n        removeBook(bookId: $bookId) {\r\n            _id\r\n            username\r\n            email\r\n            bookCount\r\n            savedBooks {\r\n                bookId\r\n                authors\r\n                description\r\n                title\r\n                image\r\n                link\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    // console.log(token)\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK} from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const [saveBook] = useMutation(SAVE_BOOK);\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n        link: book.volumeInfo.infoLink,\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      console.log(bookToSave)\n      await saveBook({ \n        variables: {...bookToSave}\n      });\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_ME = gql`\r\n{\r\n        me {\r\n            _id\r\n            username\r\n            email\r\n            bookCount\r\n            savedBooks {\r\n                bookId\r\n                authors\r\n                description\r\n                title\r\n                image\r\n                link\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userData = data?.me || {};\n\n//   useEffect(() => {\n//     const getUserData = async () => {\n//       try {\n//         const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n//         if (!token) {\n//           return false;\n//         }\n\n//         const response = await GET_ME(token);\n\n//         if (!response.ok) {\n//           throw new Error('something went wrong!');\n//         }\n\n//         const user = await response.json();\n//         setUserData(user);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n\n//   getUserData();\n// }, [userDataLength]);\n\n// create function that accepts the book's mongo _id value as param and deletes the book from the database\nconst handleDeleteBook = async (bookId) => {\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  if (!token) {\n    return false;\n  }\n\n  try {\n    await removeBook({\n      variables: { bookId },\n    });\n\n    removeBookId(bookId);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// if data isn't here yet, say so\nif (loading) {\n  return <h2>LOADING...</h2>;\n}\n\nreturn (\n  <>\n    <Jumbotron fluid className='text-light bg-dark'>\n      <Container>\n        <h1>Viewing saved books!</h1>\n      </Container>\n    </Jumbotron>\n    <Container>\n      <h2>\n        {userData.savedBooks?.length\n          ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n          : 'You have no saved books!'}\n      </h2>\n      <CardColumns>\n        {userData.savedBooks?.map((book) => {\n          return (\n            <Card key={book.bookId} border='dark'>\n              {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n              <Card.Body>\n                <Card.Title>{book.title}</Card.Title>\n                <p className='small'>Authors: {book.authors}</p>\n                <Card.Text>{book.description}</Card.Text>\n                <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                  Delete this Book!\n                </Button>\n              </Card.Body>\n            </Card>\n          );\n        })}\n      </CardColumns>\n    </Container>\n  </>\n);\n};\n\nexport default SavedBooks;\n","import React, { useEffect, useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // useEffect(()=> {\n  //   if(error) {\n  //     setShowAlert(true);\n  //   } else {\n  //     setShowAlert(false);\n  //   }\n  // }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      })\n      console.log(data);\n      console.log(userFormData);\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useEffect, useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client'\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\nconst [login, { error }] = useMutation(LOGIN_USER);\n\n// useEffect(() => {\n//   if (error) {\n//     setShowAlert(true);\n//   } else {\n//     setShowAlert(false);\n//   }\n// }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } =await login({\n        variables: {...userFormData },\n      })\n      console.log(data);\n      console.log(userFormData);\n      \n\n      Auth.login(data.login.token);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers })=> {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n//  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}